AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  domainName:
    Type: String
  restApiName:
    Type: String
  trustStoreUri:
    Type: String
  apiHostCert:
    Type: String
  s3Credential:
    Type: String
  rootEndpointUri:
    Type: String
  hostedZoneId:
    Type: AWS::Route53::HostedZone::Id
  lightsPageUri:
    Type: String
  doorPageUri:
    Type: String
  ssmResource:
    Type: String
  ssmPath:
    Type: String
  insidePageUri:
    Type: String
  outsidePageUri:
    Type: String
  faviconUri:
    Type: String
  doorStreamPath:
    Type: String
  streamsPageUri:
    Type: String
  stylesheetUri:
    Type: String
  streamsMotionPageUri:
    Type: String
  alarmTopic:
    Type: String
  navBarUri:
    Type: String
  insideCustomPageUri:
    Type: String
  outsideCustomPageUri:
    Type: String

Resources:
  StunningDisco:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref restApiName
      DisableExecuteApiEndpoint: True
      BinaryMediaTypes:
        - "*/*" # Allow for images to be returned by lambda proxy
      EndpointConfiguration:
        Types:
          - REGIONAL

  StunningDiscoDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref domainName
      EndpointConfiguration:
        Types:
          - REGIONAL
      MutualTlsAuthentication:
        TruststoreUri: !Ref trustStoreUri
      RegionalCertificateArn: !Ref apiHostCert
      SecurityPolicy: TLS_1_2

  ProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      RestApiId: !Ref StunningDisco
      DeploymentId: !Ref StunningDiscoDeployment
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: True
          ThrottlingBurstLimit: '10'
          ThrottlingRateLimit: '10.0'

  StunningDiscoDomainMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    DependsOn: ProdStage
    Properties:
      DomainName: !Ref StunningDiscoDomain
      RestApiId: !Ref StunningDisco
      Stage: !Ref ProdStage

  StunningDiscoDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - StunningDiscoRootEndpoint
      - LightsProxyResource
      - CustomResource
    Properties:
      RestApiId: !Ref StunningDisco

  StunningDiscoDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'hostedZoneId'
      Name: !Ref domainName
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt StunningDiscoDomain.RegionalHostedZoneId
        DNSName: !GetAtt StunningDiscoDomain.RegionalDomainName

  StunningDiscoRootEndpoint:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !GetAtt StunningDisco.RootResourceId
      HttpMethod: "GET"
      AuthorizationType: NONE
      OperationName: "Root path"
      Integration:
        Type: "AWS"
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "GET"
        Uri: !Ref rootEndpointUri
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "text/html": "Empty" }

  NavResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt StunningDisco.RootResourceId
      PathPart: navbar.html
      RestApiId: !Ref StunningDisco

  NavResourceEndpoint:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref NavResource
      HttpMethod: "GET"
      AuthorizationType: NONE
      OperationName: "Nav bar resource path"
      Integration:
        Type: "AWS"
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "GET"
        Uri: !Ref navBarUri
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "text/html": "Empty" }

  StreamsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt StunningDisco.RootResourceId
      PathPart: streams
      RestApiId: !Ref StunningDisco

  StreamsPageEndpoint:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref StreamsResource
      HttpMethod: "GET"
      AuthorizationType: NONE
      OperationName: "Streams base path"
      Integration:
        Type: "AWS"
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "GET"
        Uri: !Ref streamsPageUri
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "text/html": "Empty" }

  StreamsDoorResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref StreamsResource
      PathPart: door
      RestApiId: !Ref StunningDisco

  StreamsMotionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref StreamsResource
      PathPart: motion
      RestApiId: !Ref StunningDisco

  StreamsMotionPageEndpoint:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref StreamsMotionResource
      HttpMethod: "GET"
      AuthorizationType: NONE
      OperationName: "Streams motion base path"
      Integration:
        Type: "AWS"
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "GET"
        Uri: !Ref streamsMotionPageUri
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "text/html": "Empty" }

  StreamsMotionBlobResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref StreamsMotionResource
      PathPart: blob
      RestApiId: !Ref StunningDisco

  StreamsMotionBlobEndpoint:
    DependsOn: ServeImageLambda
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref StreamsMotionBlobResource
      HttpMethod: GET
      AuthorizationType: NONE
      OperationName: "Serve motion blob by invoking lambda"
      Integration:
        Type: AWS_PROXY
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: POST # needs to be POST
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ServeMotionLambda.Arn}/invocations # ARN

  StreamsDoorInvokeEndpoint:
    DependsOn: HttpRequestLambda
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref StreamsDoorResource
      HttpMethod: GET
      AuthorizationType: NONE
      OperationName: "Invoke door stream"
      Integration:
        Type: AWS_PROXY
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "POST"
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${RedirectLambda.Arn}/invocations # ARN

  DoorResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt StunningDisco.RootResourceId
      PathPart: door
      RestApiId: !Ref StunningDisco

  DoorPageEndpoint:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref DoorResource
      HttpMethod: "GET"
      AuthorizationType: NONE
      OperationName: "Door base path"
      Integration:
        Type: "AWS"
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "GET"
        Uri: !Ref doorPageUri
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "text/html": "Empty" }

  DoorProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref DoorResource
      PathPart: "{proxy+}"
      RestApiId: !Ref StunningDisco

  DoorProxyEndpoint:
    DependsOn: HttpRequestLambda
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref DoorProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      OperationName: "Door proxy endpoint"
      Integration:
        Type: AWS_PROXY
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "POST"
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${HttpRequestLambda.Arn}/invocations # ARN

  LightsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt StunningDisco.RootResourceId
      PathPart: lights
      RestApiId: !Ref StunningDisco

  LightsPageEndpoint:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref LightsResource
      HttpMethod: "GET"
      AuthorizationType: NONE
      OperationName: "Lights base path"
      Integration:
        Type: "AWS"
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "GET"
        Uri: !Ref lightsPageUri
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "text/html": "Empty" }

  LightsProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref LightsResource
      PathPart: "{proxy+}"
      RestApiId: !Ref StunningDisco

  LightsProxyEndpoint:
    DependsOn: HttpRequestLambda
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref LightsProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      OperationName: "Lights proxy endpoint"
      Integration:
        Type: AWS_PROXY
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "POST"
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${HttpRequestLambda.Arn}/invocations # ARN

  InsideResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt StunningDisco.RootResourceId
      PathPart: inside
      RestApiId: !Ref StunningDisco

  InsidePageEndpoint:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref InsideResource
      HttpMethod: "GET"
      AuthorizationType: NONE
      OperationName: "Inside base path"
      Integration:
        Type: "AWS"
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "GET"
        Uri: !Ref insidePageUri
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "text/html": "Empty" }

  InsideProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref InsideResource
      PathPart: "{proxy+}"
      RestApiId: !Ref StunningDisco

  InsideProxyEndpoint:
    DependsOn: HttpRequestLambda
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref InsideProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      OperationName: "Inside proxy endpoint"
      Integration:
        Type: AWS_PROXY
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "POST"
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${HttpRequestLambda.Arn}/invocations # ARN

  OutsideResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt StunningDisco.RootResourceId
      PathPart: outside
      RestApiId: !Ref StunningDisco

  OutsidePageEndpoint:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref OutsideResource
      HttpMethod: "GET"
      AuthorizationType: NONE
      OperationName: "Outside base path"
      Integration:
        Type: "AWS"
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "GET"
        Uri: !Ref outsidePageUri
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "text/html": "Empty" }

  OutsideProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref OutsideResource
      PathPart: "{proxy+}"
      RestApiId: !Ref StunningDisco

  OutsideProxyEndpoint:
    DependsOn: HttpRequestLambda
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref OutsideProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      OperationName: "Outside proxy endpoint"
      Integration:
        Type: AWS_PROXY
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "POST"
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${HttpRequestLambda.Arn}/invocations # ARN

  CustomResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt StunningDisco.RootResourceId
      PathPart: custom
      RestApiId: !Ref StunningDisco

  CustomInsideResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref CustomResource
      PathPart: inside
      RestApiId: !Ref StunningDisco

  CustomInsidePageEndpoint:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref CustomInsideResource
      HttpMethod: "GET"
      AuthorizationType: NONE
      OperationName: "Inside custom path"
      Integration:
        Type: "AWS"
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "GET"
        Uri: !Ref insideCustomPageUri
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "text/html": "Empty" }

  CustomOutsideResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref CustomResource
      PathPart: outside
      RestApiId: !Ref StunningDisco

  CustomOutsidePageEndpoint:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref CustomOutsideResource
      HttpMethod: "GET"
      AuthorizationType: NONE
      OperationName: "Outside custom path"
      Integration:
        Type: "AWS"
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "GET"
        Uri: !Ref outsideCustomPageUri
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "text/html": "Empty" }

  FaviconResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt StunningDisco.RootResourceId
      PathPart: favicon.ico
      RestApiId: !Ref StunningDisco

  FaviconEndpoint:
    DependsOn: ServeImageLambda
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref FaviconResource
      HttpMethod: GET
      AuthorizationType: NONE
      OperationName: "Serve image by invoking lambda"
      Integration:
        Type: AWS_PROXY
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: POST # needs to be POST
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${ServeImageLambda.Arn}/invocations # ARN

  StylesheetResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt StunningDisco.RootResourceId
      PathPart: style.css
      RestApiId: !Ref StunningDisco

  StylesheetEndpoint:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StunningDisco
      ResourceId: !Ref StylesheetResource
      HttpMethod: "GET"
      AuthorizationType: NONE
      OperationName: "Stylesheet path"
      Integration:
        Type: "AWS"
        Credentials: !Ref s3Credential
        IntegrationHttpMethod: "GET"
        Uri: !Ref stylesheetUri
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "text/css": "Empty" }

  HttpRequestLambda:
    Type: 'AWS::Serverless::Function'
    DependsOn:
      - PythonSqsModuleLayer
      - PythonSsmModuleLayer
    Properties:
      FunctionName: 'http-request'
      Handler: http-request.lambda_handler
      Runtime: python3.8
      CodeUri: http-request.zip
      MemorySize: 128
      Timeout: 30
      Policies:
        - Statement:
            - Sid: SSMGetParamsByPath
              Effect: Allow
              Action:
                - ssm:GetParametersByPath
              Resource: !Ref ssmResource
        - Statement:
            - Sid: SQSpushRecord
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: 'arn:aws:sqs:us-east-1:476889715112:DatabaseMessageQueue'
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          SSM_PATH: !Ref ssmPath
          TZ: America/New_York
      Layers:
        - !Ref PythonSqsModuleLayer
        - !Ref PythonSsmModuleLayer

  HttpRequestLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${HttpRequestLambda}"
      RetentionInDays: 7

  HttpRequestLambdaAlarm: # Alarm if 1 bad data point (of >= 2 errors each) within 5 mins
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref alarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1 # this is the M in "M out of N data points to alarm"
      EvaluationPeriods: 5 # this is the N in "M out of N data points to alarm"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60 # seconds between data points
      Statistic: Sum
      Unit: Count
      Threshold: '2'
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref HttpRequestLambda

  ServeImageLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: 'serve-image'
      Handler: serve-image.lambda_handler
      Runtime: python3.8
      CodeUri: serve-image.zip
      MemorySize: 128
      Timeout: 30
      Role: !Ref s3Credential
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          BUCKET_NAME: !Ref domainName
          TZ: America/New_York

  ServeImageLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ServeImageLambda}"
      RetentionInDays: 7

  ServeImageLambdaAlarm: # Alarm if 1 bad data point (of >= 2 errors each) within 5 mins
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref alarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1 # this is the M in "M out of N data points to alarm"
      EvaluationPeriods: 5 # this is the N in "M out of N data points to alarm"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60 # seconds between data points
      Statistic: Sum
      Unit: Count
      Threshold: '2'
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref ServeImageLambda

  PythonMysqlLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: vizzyy-packaging
        S3Key: pymysql_layer.zip
      LayerName: pymysql_layer

  PythonSqsModuleLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: vizzyy-packaging
        S3Key: sqs_module_layer.zip
      LayerName: sqs_module_layer

  PythonSsmModuleLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: vizzyy-packaging
        S3Key: ssm_module_layer.zip
      LayerName: ssm_module_layer

  ServeMotionLambda:
    Type: 'AWS::Serverless::Function'
    DependsOn:
      - PythonMysqlLayer
      - PythonSqsModuleLayer
      - PythonSsmModuleLayer
    Properties:
      FunctionName: 'serve-motion'
      Handler: serve-motion.lambda_handler
      Runtime: python3.8
      CodeUri: serve-motion.zip
      MemorySize: 128
      Timeout: 30
      Layers:
        - !Ref PythonMysqlLayer
        - !Ref PythonSqsModuleLayer
        - !Ref PythonSsmModuleLayer
      Role: !Ref s3Credential
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          SSM_PATH: !Ref ssmPath
          TZ: America/New_York

  ServeMotionLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ServeMotionLambda}"
      RetentionInDays: 7

  ServeMotionLambdaAlarm: # Alarm if 1 bad data point (of >= 2 errors each) within 5 mins
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref alarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1 # this is the M in "M out of N data points to alarm"
      EvaluationPeriods: 5 # this is the N in "M out of N data points to alarm"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60 # seconds between data points
      Statistic: Sum
      Unit: Count
      Threshold: '2'
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref ServeMotionLambda

  RedirectLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: 'redirect'
      Handler: redirect.lambda_handler
      Runtime: python3.8
      CodeUri: redirect.zip
      Timeout: 5
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          REDIRECT_URL: !Ref doorStreamPath
          TZ: America/New_York

  RedirectLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${RedirectLambda}"
      RetentionInDays: 7

  RedirectLambdaAlarm: # Alarm if 1 bad data point (of >= 2 errors each) within 5 mins
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref alarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1 # this is the M in "M out of N data points to alarm"
      EvaluationPeriods: 5 # this is the N in "M out of N data points to alarm"
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60 # seconds between data points
      Statistic: Sum
      Unit: Count
      Threshold: '2'
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref RedirectLambda